<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on </title>
    <link>https://wyb0.com/tags/php/</link>
    <description>Recent content in php on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Jul 2018 00:09:17 +0800</lastBuildDate>
    
	<atom:link href="https://wyb0.com/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于 PHP SESSION 反序列化</title>
      <link>https://wyb0.com/posts/2018/php-session-deserialize/</link>
      <pubDate>Mon, 23 Jul 2018 00:09:17 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2018/php-session-deserialize/</guid>
      <description>0x00 环境 公司出了一些ctf，说要摸底，然后根据答题成绩来分配相应工作。。。。。
其中有一道是php反序列化，直接用的就是 第三届4.29“安恒杯”网络安全技术大赛初赛第三个web题
我比较菜，这里根据网上已有writeup做了一遍，这里记录一下。。。。
reber@wyb:~$ html cat /proc/version Linux version 4.4.0-31-generic (buildd@lgw01-43) (gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3) ) #50~14.04.1-Ubuntu SMP Wed Jul 13 01:07:32 UTC 2016 reber@wyb:~$ html php --version PHP 5.5.9-1ubuntu4.21 (cli) (built: Feb 9 2017 20:54:58) Copyright (c) 1997-2014 The PHP Group Zend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies with Zend OPcache v7.0.3, Copyright (c) 1999-2014, by Zend Technologies reber@ubuntu-linux:~$ apachectl -v Server version: Apache/2.</description>
    </item>
    
    <item>
      <title>打包下载php文件</title>
      <link>https://wyb0.com/posts/2018/package-and-download-the-php-file/</link>
      <pubDate>Mon, 08 Jan 2018 22:02:07 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2018/package-and-download-the-php-file/</guid>
      <description>0x00 代码如下 &amp;lt;?php function addFileToZip($zip,$zipname,$path){ $handler = opendir($path); while(($filename = readdir($handler))!==false) { if($filename != &amp;quot;.&amp;quot; &amp;amp;&amp;amp; $filename != &amp;quot;..&amp;quot; &amp;amp;&amp;amp; $filename!= $zipname){ if (is_dir($path.&amp;quot;/&amp;quot;.$filename)) { //如果读取的某个对象是文件夹，则递归 addFileToZip($zip,$zipname,$path.&amp;quot;/&amp;quot;.$filename); } else { $zip-&amp;gt;addFile($path.&amp;quot;/&amp;quot;.$filename); } } } @closedir($path); } function tar($zipname,$path) { $zip = new ZipArchive(); //使用本类，linux需开启zlib，windows需取消php_zip.dll前的注释 if ($zip-&amp;gt;open($zipname, ZipArchive::OVERWRITE) === TRUE) { addFileToZip($zip,$zipname,$path);$zip-&amp;gt;close(); } else { exit(&#39;Unable to open file, or file creation failed!&#39;); } } function download($zipname) { if(!file_exists($zipname)){ exit(&amp;quot;Zip file does not exist!</description>
    </item>
    
    <item>
      <title>PHP安全配置</title>
      <link>https://wyb0.com/posts/2016/php-safe-configuration/</link>
      <pubDate>Thu, 01 Sep 2016 08:46:03 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/php-safe-configuration/</guid>
      <description> 0x00 PHP的配置 PHP的配置文件为php.ini,其中有些项配置不当的话就会造成一些安全问题
0x01 远程文件包含  涉及配置项  allow_url_include  配置为On时允许进行远程文件包含  allow_url_fopen  配置为On时允许使用函数fopen、file_put_contents   配置方案  alllow_url_include = Off allow_url_fopen = Off   0x02 关闭错误回显  涉及配置项  display_errors  配置为On时会显示错误信息   配置方案  display_errors = Off log_errors = On error_log = /var/log/php_error.log   0x03 隐藏php版本  涉及配置项  expose_php  为Off时会隐藏php版本   配置方案  expose_php = Off   0x04 魔术引号  涉及配置项  magic_quotes_gpc  过滤get、post、cookie的单引号、双引号、反斜杠、空字符，但不过滤$_SERVER  magic_quotes_runtime  对文件或数据库中取出的数据进行过滤，可防止二次注入   配置方案  做逻辑判断时需要去掉反斜杠，所以用全局过滤框架做过滤吧   0x05 安全模式  涉及配置项  safe_mode  开启后安全系数提升，但会限制函数使用权限和操作目录文件权限等   配置方案  在安全模式下可以使用safe_mode_include_dir = /var/www/common来排除某些文件   0x06 目录权限控制  涉及配置项  open_basedir  开启后可将用户访问范围限定，可防止跨站，但会影响性能   配置方案  open_basedir = /var/www/web1/:/var/www/web2/ (后面的斜杠不能少)   0x07 禁止函数  涉及配置项  disable_functions  禁止某些命令执行函数和文件操作函数的使用   配置方案  disable_functions = system,passthru,exec,shell_exec,popen,pcntl_exec, proc_open,chdir,chroot,getcwd,readdir,mkdir,copy,file_get_contents,   0x08 注册全局变量  涉及配置项  register_globals  值为On是会开启全局注册变量功能   配置方案  register_globals = Off   </description>
    </item>
    
    <item>
      <title>PHP之封装MySQL类</title>
      <link>https://wyb0.com/posts/2016/php-package-mysql-function/</link>
      <pubDate>Fri, 03 Jun 2016 11:19:05 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/php-package-mysql-function/</guid>
      <description>0x00 config.inc.php内容如下 &amp;lt;?php return array( &#39;DB_HOST&#39; =&amp;gt; &#39;192.168.188.134&#39;, &#39;DB_NAME&#39; =&amp;gt; &#39;scoreboard&#39;, &#39;DB_USER&#39; =&amp;gt; &#39;score&#39;, &#39;DB_PASS&#39; =&amp;gt; &#39;123456&#39;, &#39;DB_CHARSET&#39; =&amp;gt; &#39;utf8&#39;, &#39;IS_LOG&#39; =&amp;gt; 1,//开启日志 &#39;LOGFILEPATH&#39; =&amp;gt; &#39;../log.txt&#39;//日志路径 ); /* $database = require(&#39;./config.php&#39;); echo $database[&#39;DB_TYPE&#39;]; //输出&#39;DB_TYPE&#39; */ ?&amp;gt;  0x01 表设计如下 create database scoreboard; use scoreboard; drop table if exists users; create table users( id int not null auto_increment primary key, gid int not null default &#39;xiaoming&#39; comment &#39;组id&#39;, username varchar(20) not null default &#39;xiaoming&#39; comment &#39;用户名&#39;, password varchar(32) not null default &#39;123456&#39; comment &#39;密码&#39;, sex varchar(2) not null default &#39;0&#39; comment &#39;性别&#39;, totalscore int not null default &#39;0&#39; comment &#39;个人总积分&#39; ); drop table if exists share; create table share( id int not null auto_increment primary key, uid int not null, content varchar(1024) not null default &#39;content&#39; comment &#39;分享内容&#39;, comment varchar(1024) comment &#39;点评&#39;, date varchar(15) not null default &#39;20150101&#39; comment &#39;分享日期&#39; ); drop table if exists score; create table score( id int not null auto_increment primary key, uid int not null default &#39;0&#39; comment &#39;用户id&#39;, score int not null default &#39;0&#39; comment &#39;用户单次积分&#39;, ); grant all privileges on scoreboard.</description>
    </item>
    
    <item>
      <title>PHP之MySQL常用函数</title>
      <link>https://wyb0.com/posts/2016/php-mysql-common-function/</link>
      <pubDate>Thu, 02 Jun 2016 13:21:49 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/php-mysql-common-function/</guid>
      <description>0x00 处理函数  mysql_connect(server,user,pwd,newlink,clientflag)
连接服务器的函数,成功则返回MySQL标识，失败则返回FALSE
 mysql_select_db(database,connection)
选择数据库的函数，成功则返回true，失败则返回false
 mysql_query(query,connection)
执行一条查询，返回一个资源标识符(结果集)，如果查询执行不正确则返回FALSE
 mysql_num_rows(data)和mysql_num_fields(data)
函数分别返回结果集中行和列的数目(禁对SELECT语句有效),结果集从 mysql_query()的调用中得到
 mysql_fetch_assoc(data)
从结果集中取得一行作为关联数组，若没有更多行则返回false
 mysql_fetch_row(data)
从结果集中取得一行作为索引数组，若没有更多行则返回false
 mysql_error(connection)
返回上一个MySQL函数的错误文本，如果没有出错则返回&amp;rdquo;(空字符串)
 mysql_affected_rows(link_identifier)
返回前一次MySQL操作(增删改)所影响的记录行数,失败则返回-1
 mysql_insert_id(connection)
返回上一步INSERT操作产生的 ID。如果上一查询没有产生AUTO_INCREMENT的ID，则mysql_insert_id()返回 0。
 mysql_data_seek(data,row)
结果集data从mysql_query()的调用中得到,行指针移动到指定的行号，接着调用 mysql_fetch_row() 将返回那一行。如果成功则返回 true，失败则返回 false
  0x01 例子 &amp;lt;?php $server = &amp;quot;127.0.0.1&amp;quot;; $dbname = &amp;quot;massage&amp;quot;; $user = &amp;quot;msg&amp;quot;; $pass = &amp;quot;123456&amp;quot; $conn = mysql_connect($server,$user,$pass) or die(&#39;连接服务器失败:&#39;.mysql_error()); mysql_query(&amp;quot;set names &#39;utf8&#39;&amp;quot;);//设置数据库输出编码 mysql_select_db($dbname,$conn) or die(mysql_error($conn)); //选择数据库 $sql = &amp;quot;select username,password from user&amp;quot;; //构造sql语句 $result = mysql_query($sql); //执行sql语句，返回结果集 $num = mysql_num_rows($result);//返回执行结果的行数 echo &amp;quot;&amp;lt;br /&amp;gt;结果的行数:{$num}&amp;lt;br /&amp;gt;&amp;quot;; while ($row = mysql_fetch_assoc($result)) { echo $row[id].</description>
    </item>
    
    <item>
      <title>MySQL语法</title>
      <link>https://wyb0.com/posts/2016/mysql-syntax/</link>
      <pubDate>Thu, 02 Jun 2016 11:19:05 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/mysql-syntax/</guid>
      <description>0x00 Select语句的一般语法 1.SELECT [ALL|DISTINCT] &amp;lt;目标列表达式&amp;gt; [,&amp;lt;目标列表达式&amp;gt; ]... 2.FROM &amp;lt;表名或视图名&amp;gt; [,&amp;lt;表名或视图名&amp;gt; ]... 3.[ WHERE &amp;lt;行条件表达式&amp;gt; ] 4.[ GROUP BY &amp;lt;列名1&amp;gt; ,[列名2][,...][HAVING组条件表达式] ] 5.[ ORDER BY &amp;lt;列名1&amp;gt; ,[ASC|DESC][,...] ];  上面5个句子书写时按顺序，尽量一个句子一行，但在机器内部执行时的顺序是2-3-4-1-5，
即先确定从哪个数据源查找，
然后确定过滤条件，
若有分组则对过滤后的记录进行分组，若分组有限制条件则对分组进一步限制，
然后将符合条件的列查询出来，
最后对结果进行排序。
select name as &#39;名字&#39;,password as &#39;密码&#39; form user; select * from message where id between 2 and 6; select * from message where title like &#39;%留言_&#39;; //%匹配任意个字符,_匹配一个字符 select * from message where uid in (2,3,4); //删除2、3、4共3条数据  0x01 连接查询 [&amp;lt;表名1&amp;gt;.</description>
    </item>
    
    <item>
      <title>PHP之上传与下载</title>
      <link>https://wyb0.com/posts/2016/php-upload-and-download/</link>
      <pubDate>Tue, 24 May 2016 08:31:09 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/php-upload-and-download/</guid>
      <description>0x00 上传  客户端设置
客户端使用form表单上传文件，在form表单中必须指明enctype和method属性的值
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;post&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;quot;xx.php&amp;quot; mothod=&amp;quot;post&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;file&amp;quot; value=&amp;quot;myfile&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;提交&amp;quot; /&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  服务端设置
 php.ini:
file_uploads = On //默认允许HTTP文件上传，此选项不能设置为OFF upload_tmp_dir= //文件上传时存放文件的临时目录 upload_max_filesize = 20M //设定单个文件上传的大小，必须小于post_max_size post_max_size = 19M //允许POST表单的数据最大大小  $_FILES:
$_FILES[&#39;upload_file&#39;][&#39;name&#39;] //带扩展名的原始文件名 $_FILES[&#39;upload_file&#39;][&#39;size&#39;] //文件大小 $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;] //临时文件名 $_FILES[&#39;upload_file&#39;][&#39;error&#39;] //上传文件时的错误信息 $_FILES[&#39;upload_file&#39;][&#39;type&#39;] //上传文件的类型 //type是上传文件时原始信息里的content_type,即MIME,有image/gig、text/html等 //error一般有5中类型： //0 上传成功 //1 文件大小超过了upload_max_filesize //2 文件大小超过了表单总MAX_FILE_SIZE设定的值 //3 只有部分被上传 //4 没有上传任何文件  服务端上传步骤</description>
    </item>
    
    <item>
      <title>PHP之目录与文件</title>
      <link>https://wyb0.com/posts/2016/php-directory-and-file/</link>
      <pubDate>Sun, 22 May 2016 16:29:47 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/php-directory-and-file/</guid>
      <description>0x00 目录的操作 &amp;lt;?php $path = &amp;quot;/var/www/html/php/dir.php&amp;quot;; echo dirname($path).&amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; //返回上级路径 echo basename($path).&amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; //返回文件名部分 print_r(pathinfo($path)); //返回包含path信息的数组 echo &amp;quot;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;&amp;quot;; //readdir()从目录句柄读取条目，返回目录中的文件名，指针依次向后移动 $path = &amp;quot;D:/phpStudy/WWW/php&amp;quot;; $dh = opendir($path); while (false !== ($filename=readdir($dh))) { echo $filename.&amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; } rewinddir($dh); //指针复位 echo readdir($dh); closedir($dh); mkdir(&amp;quot;./aaa&amp;quot;);//创建文件夹aaa rmdir(&amp;quot;./aaa&amp;quot;);//删除文件夹aaa file_put_contents(&amp;quot;aa.php&amp;quot;, &amp;quot;&amp;quot;);//创建文件aa.php unlink(&amp;quot;./aa.php&amp;quot;);//删除文件aa.php ?&amp;gt;   
0x01 文件的读写  fopen(filename,mode)和fclose(filename,mode) 例子： &amp;lt;?php $file = fopen(&amp;quot;test.txt&amp;quot;,&amp;quot;r&amp;quot;); $file = fopen(&amp;quot;/home/test/test.txt&amp;quot;,&amp;quot;r&amp;quot;); $file = fopen(&amp;quot;/home/test/test.gif&amp;quot;,&amp;quot;wb&amp;quot;); $file = fopen(&amp;quot;http://www.example.com/&amp;quot;,&amp;quot;r&amp;quot;); $file = fopen(&amp;quot;ftp://user:password@example.</description>
    </item>
    
    <item>
      <title>PHP之字符串</title>
      <link>https://wyb0.com/posts/2016/php-string/</link>
      <pubDate>Sat, 21 May 2016 23:16:28 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/php-string/</guid>
      <description>0x00 特点  字符串可以使用数组的处理函数操作，但并不是真正的数组 双引号中的变量用{}括起来，因为字符串中若遇到$符号，解析器会尽可能多的获取后面的字符以组成一个合法的变量名
&amp;lt;?php $lamp = array(&#39;os&#39; =&amp;gt; &#39;Linux&#39;, &#39;webserver&#39; =&amp;gt; &#39;Apache&#39;, &#39;db&#39; =&amp;gt; &#39;Mysql&#39;, &#39;language&#39; =&amp;gt; &#39;PHP&#39;); echo &amp;quot;A OS is $lamp[os].&amp;quot;; // ok echo &amp;quot;A OS is $lamp[&#39;os&#39;].&amp;quot;; // false echo &amp;quot;A OS is {$lamp[&#39;os&#39;]}.&amp;quot;; //ok echo &amp;quot;A OS is {$lamp[os]}.&amp;quot;; // ok echo &amp;quot;This square is $square-&amp;gt;width meters broad.&amp;quot;; //ok echo &amp;quot;This square is $square-&amp;gt;width meters broad.&amp;quot;; //ok echo &amp;quot;This square is $square-&amp;gt;width meters broad.</description>
    </item>
    
    <item>
      <title>PHP之面向对象</title>
      <link>https://wyb0.com/posts/2016/php-object-oriented/</link>
      <pubDate>Fri, 20 May 2016 16:07:55 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/php-object-oriented/</guid>
      <description>0x00 面向对象  面向对象概念  面向对象是达到了软件工程的三个目标：重用性、灵活性和扩展性，使其编程的代码更加简洁、更易于维护、并且具有更强的可重用性。  类和对象的关系  在面向对象的编程语言中，类是一个对立的程序单位，而对象的抽象就是类。类描述了一组有相同特性(属性)和相同行为(方法)的对象。开发时要先抽象类再用该类去创建对象。而我们的程序中直接使用的是对象而不是类。  什么是类  在面向对象的编程语言中，类是一个对立的程序单位，是具有相同属性和服务的一组对象的集合。它为属于该类的所有对象提供了同意的抽象描述，其内部包括成员属性和服务的方法两个部分。  什么是对象  在客观世界里，所有的事物都是由对象和对象之间的联系组成的。对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位，一个对象由一组属性和有权对这些属性进行操作的一组服务的封装体。   0x01 类的声明  类名和变量名还有函数名的命名规则类似，都遵循PHP中定义名称的命名规则。 若类名由多个单词组成，习惯上每个单词的首字母要大写 类中成员可分为属性和方法 属性为静态描述，方法为动态描述 在类中声明成员属性时，变量前面一定要有关键字，如：public、private、static等 若不需要有特定意义的修饰，则使用var关键字  格式： [一些修饰类的关键字] class 类名 { 类中成员; } Class Person { 成员属性： 姓名、性别、年龄、身高、体重、电话、住址等 成员方法： 说话、学习、走路、吃饭、开车、使用手机等 } 例子： &amp;lt;?php class Person { var $name; var $age; var $sex; function say() { echo &amp;quot;人在说话&amp;quot;; } function run() { echo &amp;quot;人在走路&amp;quot;; } } ?</description>
    </item>
    
    <item>
      <title>PHP之数组</title>
      <link>https://wyb0.com/posts/2016/php-array/</link>
      <pubDate>Wed, 18 May 2016 11:09:46 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/php-array/</guid>
      <description>0x00 分类  索引数组 索引值从0开始，依次递增 关联数组 以字符串为索引，键和值对是无序组合，每个键都是唯一的  0x01 数组的定义 两种方法：
 直接为数组元素赋值即可声明数组 使用array()函数声明数组
&amp;lt;?php // 1.直接为数组元素赋值即可声明数组 $contact_index[0] = 1; $contact_index[1] = &amp;quot;高某&amp;quot;; $contact_index[2] = &amp;quot;A公司&amp;quot;; $contact_index[3] = &amp;quot;北京市&amp;quot;; $contact_index[] = &amp;quot;gao@a.com&amp;quot;; var_dump($contact_index); $contact_key[&amp;quot;ID&amp;quot;] = &amp;quot;2&amp;quot;; $contact_key[&amp;quot;姓名&amp;quot;] = &amp;quot;峰某&amp;quot;; $contact_key[&amp;quot;公司&amp;quot;] = &amp;quot;B公司&amp;quot;; $contact_key[&amp;quot;邮箱&amp;quot;] = &amp;quot;feng@b.com&amp;quot;; var_dump($contact_key); // 2.使用array()函数声明数组 $contact_key_array = array( &amp;quot;ID&amp;quot; =&amp;gt; 1; &amp;quot;姓名&amp;quot; =&amp;gt; &amp;quot;峰某&amp;quot;; &amp;quot;公司&amp;quot; =&amp;gt; &amp;quot;B公司&amp;quot;; &amp;quot;邮箱&amp;quot; =&amp;gt; &amp;quot;feng@b.com&amp;quot;; ); var_dump($contact_key_array); ?&amp;gt;   0x02 数组的遍历  for语句遍历数组 foreach语句遍历数组</description>
    </item>
    
    <item>
      <title>PHP之基础</title>
      <link>https://wyb0.com/posts/2016/php-basis/</link>
      <pubDate>Sun, 15 May 2016 09:10:23 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2016/php-basis/</guid>
      <description>0x00 PHP的作用 1. 收集表单数据 2. 生成动态网页 3. 字符串处理 4. 动态输出图片 5. 处理服务器端文件系统 6. 编写数据库支持的网页 7. 会话跟踪控制 8. 处理XML文件 9. 支持大量的网络协议 10. 服务器端的其他相关操作  0x01 PHP代码嵌入位置 可以将PHP语言嵌入到扩展名为.php的HTML文件中的任何位置，只要在文件中使用&amp;quot;&amp;lt;?php&amp;quot;起始符和终止符&amp;quot;?&amp;gt;&amp;quot;就会开启PHP模式，在PHP模式中写入PHP语句即可将PHP语言嵌入到HTML文件中。
0x02 解读开始和结束标记 1. &amp;lt;?php ?&amp;gt; 2. &amp;lt;script language=&amp;quot;php&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 3. &amp;lt;? ?&amp;gt; 4. &amp;lt;% %&amp;gt; //前两种总是可用，第3、4种要在php.ini中开启short_open_tag和asp_tags //双引号中的变量可以被解析，单引号中的变量不能被解析  0x03 指令分割符及空白符及注释符  一段代码中除了最后一行其他每句都要用分号结束（推荐每句都用分号结束） 空白符(空格、tab制表符、换行)会被php引擎忽略 注释符  1. 若觉得代码不合适则可以注释，但不要急于删除 2. 注释的目的在于说明程序 3. 注释对调试和编写程序可以起到很好的帮助作用 4. PHP注释符有：&amp;quot;/**/&amp;quot;、&amp;quot;//&amp;quot;、&amp;quot;#&amp;quot;  0x04 运算符 * 算数运算符：&amp;quot;+&amp;quot;、&amp;quot;-&amp;quot;、&amp;quot;*&amp;quot;、&amp;quot;/&amp;quot;、&amp;quot;%&amp;quot; * 赋值运算符：&amp;quot;=&amp;quot;、&amp;quot;+=&amp;quot;、&amp;quot;-=&amp;quot;、&amp;quot;*=&amp;quot;、&amp;quot;/=&amp;quot;、&amp;quot;%=&amp;quot; * 字符串运算符：&amp;quot;.&amp;quot;、&amp;quot;.=&amp;quot; * 递增/递减运算符：&amp;quot;++$a&amp;quot;、&amp;quot;$a++(先赋值再++)&amp;quot;、&amp;quot;--$a&amp;quot;、&amp;quot;$a--&amp;quot; * 比较运算符 * == 等于 * === 全等(完全相同) * !</description>
    </item>
    
  </channel>
</rss>