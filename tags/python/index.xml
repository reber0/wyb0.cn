<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Reber&#39;s Blog</title>
    <link>https://wyb0.com/tags/python/</link>
    <description>Recent content in python on Reber&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jul 2019 18:09:49 +0000</lastBuildDate>
    
	<atom:link href="https://wyb0.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用 Python 的协程进行快速端口扫描</title>
      <link>https://wyb0.com/posts/2019/python-coroutine-fast-port-scan/</link>
      <pubDate>Thu, 04 Jul 2019 18:09:49 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2019/python-coroutine-fast-port-scan/</guid>
      <description>0x00 协程的优势 协程拥有极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此没有线程切换的开销。和多线程比，</description>
    </item>
    
    <item>
      <title>Python 中执行系统命令</title>
      <link>https://wyb0.com/posts/2018/python-run-cmd/</link>
      <pubDate>Mon, 29 Jan 2018 16:45:34 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2018/python-run-cmd/</guid>
      <description>0x00 使用模块 在python执行系统命令一般可以通过3个模块来实现，这三个模块是：os、commands、subproces</description>
    </item>
    
    <item>
      <title>使用 Python 读写 xml 文件</title>
      <link>https://wyb0.com/posts/2017/python-read-and-write-xml/</link>
      <pubDate>Thu, 20 Jul 2017 14:20:26 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2017/python-read-and-write-xml/</guid>
      <description>0x00 解析XML的方法 SAX (simple API for XML) python 标准库包含SAX解析器，SAX用事件驱动模型，通过在解析XML的过程中触发一个个的事件并调</description>
    </item>
    
    <item>
      <title>MRQ 的使用</title>
      <link>https://wyb0.com/posts/2017/python-module-mrq/</link>
      <pubDate>Mon, 10 Jul 2017 16:30:43 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2017/python-module-mrq/</guid>
      <description>0x00 MRQ MRQ是Python基于Redis、Mongo和gevent的分布式任务队列。 MRQ一方面旨在像RQ一样简单，另一方</description>
    </item>
    
    <item>
      <title>Python 爆破 zip 压缩包</title>
      <link>https://wyb0.com/posts/2016/python-blasting-zip-archive/</link>
      <pubDate>Tue, 20 Sep 2016 14:50:59 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-blasting-zip-archive/</guid>
      <description>0x00 代码 多线程爆破加密的zip压缩包 #!/usr/bin/env python # -*- coding: utf-8 -*- import sys import optparse import zipfile import threading import Queue queue = Queue.Queue() lock = threading.Lock() result = &#39;&#39; def load_pwd(filename): for line in open(filename,&#39;r&#39;): if line: queue.put(line.strip()) def bruter(zipname,queue): global result zFile = zipfile.ZipFile(zipname) while</description>
    </item>
    
    <item>
      <title>Python 实现代理</title>
      <link>https://wyb0.com/posts/2016/python-implement-agent/</link>
      <pubDate>Tue, 13 Sep 2016 11:36:39 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-implement-agent/</guid>
      <description>0x00 帮助信息 0x01 代码如下 #!/usr/bin/env python # -*- coding: utf-8 -*- &#39;This is a proxy&#39; __author__ = &#39;xxx&#39; import sys import socket import threading import optparse lock = threading.Lock() def locker(msg): lock.acquire() print msg lock.release() def hexdump (src,length=16):#</description>
    </item>
    
    <item>
      <title>Python 封装 MySQL 类</title>
      <link>https://wyb0.com/posts/2016/python-package-mysql-function/</link>
      <pubDate>Mon, 12 Sep 2016 22:54:28 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-package-mysql-function/</guid>
      <description>0x00 安装 有两种，一个是MySQLdb，一个是pymysql 下载MySQL-python然后安装 sudo pip install pymysql(推荐，</description>
    </item>
    
    <item>
      <title>Python 的模块</title>
      <link>https://wyb0.com/posts/2016/python-module/</link>
      <pubDate>Wed, 31 Aug 2016 11:22:41 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-module/</guid>
      <description>0x00 Python的模块 在python中，任何一个python文件都可以看作一个模块 不同包下有相同模块名并不会冲突，且包下必</description>
    </item>
    
    <item>
      <title>Python 实现密码生成器</title>
      <link>https://wyb0.com/posts/2016/python-password-generator/</link>
      <pubDate>Mon, 29 Aug 2016 15:14:57 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-password-generator/</guid>
      <description>0x00 简介 有时候需要在网上注册许多账号，如果每个账户密码都一样的话，若被别人得知一个密码则所有账户就都沦陷了，若密码不一样则</description>
    </item>
    
    <item>
      <title>Python 实现多线程弱口令爆破</title>
      <link>https://wyb0.com/posts/2016/python-multi-threaded-weak-password-blasting/</link>
      <pubDate>Fri, 26 Aug 2016 17:53:51 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-multi-threaded-weak-password-blasting/</guid>
      <description>0x00 脚本 #!/usr/bin/env python # -*- coding: utf-8 -*- &#39;this script can bruter ftp/ssh/mysql&#39; __author__ = &#39;reber&#39; import Queue import threading import time import logging import socket from optparse import OptionParser import paramiko from ftplib import FTP import MySQLdb #################公有类</description>
    </item>
    
    <item>
      <title>Python 命令行参数解析</title>
      <link>https://wyb0.com/posts/2016/python-parames-parse/</link>
      <pubDate>Tue, 16 Aug 2016 15:10:44 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-parames-parse/</guid>
      <description>0x00 argparse 模块 参考 https://docs.python.org/zh-cn/3.7/library/argparse.html #!/usr/bin/env python # -*- coding: utf-8 -*- import argparse class Parser(object): &amp;quot;&amp;quot;&amp;quot;Parser&amp;quot;&amp;quot;&amp;quot; def __init__(self): super(Parser, self).__init__() self.service_type_list = [ &amp;quot;ssh&amp;quot;,&amp;quot;telnet&amp;quot;,&amp;quot;ftp&amp;quot;, &amp;quot;mysql&amp;quot;,&amp;quot;mssql&amp;quot;,&amp;quot;oracle&amp;quot;,&amp;quot;pgsql&amp;quot;,&amp;quot;redis&amp;quot; ] self.log_level = [&amp;quot;debug&amp;quot;, &amp;quot;info&amp;quot;, &amp;quot;warning&amp;quot;, &amp;quot;error&amp;quot;, &amp;quot;critical&amp;quot;] self.example = &amp;quot;&amp;quot;&amp;quot;Example: \r python3 {} -s ssh -i 123.123.123.123 \r python3 {} -s ssh -i 123.123.123.123/24 -l root -p 123456&amp;quot;&amp;quot;&amp;quot; def parser(self): parser</description>
    </item>
    
    <item>
      <title>Python 的 scapy 模块简单使用</title>
      <link>https://wyb0.com/posts/2016/python-module-scapy/</link>
      <pubDate>Thu, 11 Aug 2016 23:26:39 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-module-scapy/</guid>
      <description>0x00 简单尝试 0x01 生成一组数据包 0x02 发送数据包 send发送数据包 sr1发送数据包 sr发送数据包 0x03 发送SYN数据包 0x04 得到TCP内容</description>
    </item>
    
    <item>
      <title>Python 的 paramiko 模块</title>
      <link>https://wyb0.com/posts/2016/python-module-paramiko/</link>
      <pubDate>Thu, 14 Jul 2016 15:24:11 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-module-paramiko/</guid>
      <description>0x00 安装 直接pip install paramiko安装 或者去http://www.paramiko.org/ 下载 0x01 执行一条远程命令 #!/usr/bin/env python #-*-</description>
    </item>
    
    <item>
      <title>Python 的 cmd 模块</title>
      <link>https://wyb0.com/posts/2016/python-module-cmd/</link>
      <pubDate>Thu, 14 Jul 2016 09:44:06 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-module-cmd/</guid>
      <description>0x00 关于cmd模块 使用cmd模块创建的命令行解释器可以循环读取输入的所有行并且解析它们 0x01 cmd模块的一些常用方法： cmdl</description>
    </item>
    
    <item>
      <title>Python 简单解码 IP 头</title>
      <link>https://wyb0.com/posts/2016/python-simple-decode-ip-head/</link>
      <pubDate>Sun, 03 Jul 2016 20:06:39 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-simple-decode-ip-head/</guid>
      <description>0x00 解码IP头 Windows上运行时要以管理员身份运行 代码可以解码IP头统计通信信息并保存到文本，同时统计数量 #!/usr/bin/env python #-*- coding:utf-8 -*- import</description>
    </item>
    
    <item>
      <title>Python 的编码问题</title>
      <link>https://wyb0.com/posts/2016/python-encode-setting/</link>
      <pubDate>Wed, 29 Jun 2016 15:14:11 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-encode-setting/</guid>
      <description>0x00 几个编码函数 * ord(x) 将字符转换为10进制整数(0~255之间) #ord(&#39;a&#39;)==&amp;gt;97 * chr(x) 将10进制整数(0~255之间)转换为字符 #chr(9</description>
    </item>
    
    <item>
      <title>Python 编写规范</title>
      <link>https://wyb0.com/posts/2016/python-coding-style/</link>
      <pubDate>Sun, 12 Jun 2016 22:17:35 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-coding-style/</guid>
      <description>0x00 代码编排 1.缩进：使用4个空格缩进 2.行长度：每行不要超过80个字符 3.空行：顶级定义之间空两行，如函数或类的定义，方</description>
    </item>
    
    <item>
      <title>Python 的正则</title>
      <link>https://wyb0.com/posts/2016/python-regular/</link>
      <pubDate>Fri, 05 Feb 2016 11:38:23 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-regular/</guid>
      <description>0x00 正则表达式 正则表达式是用来匹配字符串的异常强大的东西，可以用来匹配邮箱、域名等字符串 0x01 符号 0x02 特殊字符 0x03 常用的模块属性 0x04</description>
    </item>
    
    <item>
      <title>Python 的线程</title>
      <link>https://wyb0.com/posts/2016/python-thread/</link>
      <pubDate>Wed, 03 Feb 2016 12:44:38 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-thread/</guid>
      <description>Python的参数传递其实传递的是对象，当传递可变对象(列表、队列)时相当于引用传递，可以修改对象的原始值，当传递不可变</description>
    </item>
    
    <item>
      <title>Python 的面向对象</title>
      <link>https://wyb0.com/posts/2016/python-object-oriented/</link>
      <pubDate>Mon, 25 Jan 2016 11:17:59 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-object-oriented/</guid>
      <description>0x00 面向对象 面向对象是为了解决系统的可维护性，可扩展性，可重用性 三个基本特征：封装、继承、多态 封装：对一类事物，将其相同特</description>
    </item>
    
    <item>
      <title>Python 的函数式编程</title>
      <link>https://wyb0.com/posts/2016/python-functional-programming/</link>
      <pubDate>Thu, 21 Jan 2016 21:13:17 +0000</pubDate>
      
      <guid>https://wyb0.com/posts/2016/python-functional-programming/</guid>
      <description>0x00 函数式编程 首先说一下高阶函数，能将函数作为参数来接收的函数就可以称为高阶函数，如下： def add(x,y,f): return f(x) + f(y) print add(7,-3,abs) #abs是求绝对值</description>
    </item>
    
  </channel>
</rss>