<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tornado on </title>
    <link>https://wyb0.com/tags/tornado/</link>
    <description>Recent content in tornado on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Jan 2017 18:43:27 +0800</lastBuildDate>
    
	<atom:link href="https://wyb0.com/tags/tornado/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>初识Tornado</title>
      <link>https://wyb0.com/posts/2017/tornado-basis/</link>
      <pubDate>Tue, 03 Jan 2017 18:43:27 +0800</pubDate>
      
      <guid>https://wyb0.com/posts/2017/tornado-basis/</guid>
      <description>0x00 简介 Tornado是一个用Python写的相对简单的、不设障碍的Web服务器架构,用以处理上万的同时的 连接口,让实时的Web服务通畅起来。虽然跟现在的一些用Python写的Web架构相似,比如Django, 但Tornado更注重速度,能够处理海量的同时发生的流量。  0x01 示例 main.py代码如下：
#!/usr/bin/env python # -*- coding: utf-8 -*- import tornado.ioloop import tornado.web class IndexHandler(tornado.web.RequestHandler): def get(self): #访问根时触发这个函数 name = self.get_argument(&#39;name&#39;,&#39;wyb&#39;) self.write(&#39;Hello,&#39; + name) self.write(&#39;&amp;lt;br /&amp;gt;&amp;lt;a href=&amp;quot;/login&amp;quot;&amp;gt;login&amp;lt;/a&amp;gt;&#39;) class MyLoginHandler(tornado.web.RequestHandler): def get(self): self.render(&#39;login.html&#39;) #若用户请求/login页面则将login.html发送给客户端，客户会看的一个登陆表单 def post(self): #当用户点击提交按钮是触发这个函数 name = self.get_argument(&#39;name&#39;) #接收表单的name password = self.get_argument(&#39;password&#39;) #接收表单的password self.write(&amp;quot;you name is:%s\nyou password is:%s&amp;quot; % (name,password)) def get_app(): handlers = [ (r&amp;quot;/&amp;quot;,IndexHandler), #代表请求/的都让IndexHandler处理 (r&amp;quot;/login&amp;quot;,MyLoginHandler), #表示请求/login页面的让MyLoginHandler处理 ] app = tornado.</description>
    </item>
    
  </channel>
</rss>