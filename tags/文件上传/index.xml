<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>文件上传 on Reber's Blog</title><link>https://wyb0.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link><description>Recent content in 文件上传 on Reber's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 21 Jul 2016 15:11:29 +0000</lastBuildDate><atom:link href="https://wyb0.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>文件上传之文本编辑器上传漏洞</title><link>https://wyb0.com/posts/2016/file-upload-editor-upload-vulnerability/</link><pubDate>Thu, 21 Jul 2016 15:11:29 +0000</pubDate><guid>https://wyb0.com/posts/2016/file-upload-editor-upload-vulnerability/</guid><description>&lt;h3 id="0x00-文本编辑器">0x00 文本编辑器&lt;/h3>
&lt;p>常见的文本编辑器有CKEditor、eWebEditor、UEditor、KindEditor、xhEditor等，它们的功能类似且都有图片上传、视频上传、远程下载等功能，这类文本编辑器也称为富文本编辑器。&lt;/p></description></item><item><title>文件上传漏洞常见绕过手法</title><link>https://wyb0.com/posts/2016/file-upload-simple-to-bypass/</link><pubDate>Wed, 20 Jul 2016 17:04:44 +0000</pubDate><guid>https://wyb0.com/posts/2016/file-upload-simple-to-bypass/</guid><description>&lt;h3 id="0x00-一般防止上传漏洞手法">0x00 一般防止上传漏洞手法&lt;/h3>
&lt;pre tabindex="0">&lt;code>1、客户端检测：客户端使用JavaScript检测，在文件未上传时，就对文件进行验证
 //任何客户端的验证都是不安全的，客户端验证目的是防止用户输入错误、减少
 //服务器开销，而服务端验证才可以真正防御攻击者。 
2、服务器端检测：服务端脚本一般会检测文件的MIME类型，检测文件扩展名是否合法
&lt;/code>&lt;/pre>&lt;h3 id="0x01-客户端检测">0x01 客户端检测&lt;/h3>
&lt;p>客户端验证代码形如下：&lt;/p></description></item><item><title>文件上传漏洞与文件解析漏洞</title><link>https://wyb0.com/posts/2016/file-upload-and-file-parse-vuln/</link><pubDate>Wed, 20 Jul 2016 11:30:53 +0000</pubDate><guid>https://wyb0.com/posts/2016/file-upload-and-file-parse-vuln/</guid><description>&lt;h3 id="0x00-文件上传漏洞">0x00 文件上传漏洞&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>当文件上传时，若服务端脚本语言未对上传的文件进行严格验证和过滤，若恶意用户上传恶意的
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>脚本文件时，就有可能控制整个网站甚至是服务器，这就是文件上传漏洞。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 上传后得到的权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1. 后台权限：登陆了后台，可以进行一些操作、配置
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. 网站权限：获得了webshell，可以进行查看源代码等操作
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3. 服务器权限：可以对服务器进行任意操作
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x01-文件上传漏洞分类">0x01 文件上传漏洞分类&lt;/h3>
&lt;pre tabindex="0">&lt;code>1. 配置不当可直接上传shell
 HTTP的PUT方法开启了
2. 文件解析漏洞导致文件执行
 Web容器解析漏洞
3. 本地文件上传限制被绕过
 BurpSuite抓包修改即可绕过
4. 服务端过滤不严或被绕过
 使用了黑名单过滤
5. 文件路径截断上传
 00截断等
6. 开源编辑器上传漏洞
 如CKEditor(FCKeditor的新版)、eWebEditor的漏洞
&lt;/code>&lt;/pre>&lt;h3 id="0x02-文件上传漏洞利用条件">0x02 文件上传漏洞利用条件&lt;/h3>
&lt;pre tabindex="0">&lt;code>1. 首先,上传的文件能够被web容器解释执行。所以文件上传后的目录要是web容器所覆盖到的路径
2. 其次,用户能从web访问这个文件
3. 最后,用户上传的文件若被安全检查、格式化、图片压缩等功能改变了内容,则可能导致攻击失败
&lt;/code>&lt;/pre>&lt;h3 id="0x03-文件上传漏洞挖掘">0x03 文件上传漏洞挖掘&lt;/h3>
&lt;pre tabindex="0">&lt;code>1. 查找上传点，如图片、附件、头像的上传等
2. 找类似upload的目录、类似upload.php的文件
3. 找编辑器目录，如eWebEdirot、fckeditor、kingeditor等
&lt;/code>&lt;/pre>&lt;h3 id="0x04-常见可执行文件后缀">0x04 常见可执行文件后缀&lt;/h3>
&lt;pre tabindex="0">&lt;code>可用于绕过：
php php2 php3 php5 phtml
asp aspx ascx ashx cer asa
jsp jspx jspf
&lt;/code>&lt;/pre>&lt;h3 id="0x05-解析漏洞">0x05 解析漏洞&lt;/h3>
&lt;pre tabindex="0">&lt;code>文件上传漏洞通常与Web容器的解析漏洞配合利用
常见Web容器有IIS、Nginx、Apache、Tomcat等
&lt;/code>&lt;/pre>&lt;h3 id="0x06-iis解析漏洞">0x06 IIS解析漏洞&lt;/h3>
&lt;p>IIS6.0在解析文件时存在以下两个解析漏洞&lt;/p></description></item></channel></rss>